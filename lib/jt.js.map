{"version":3,"sources":["../src/jt.js"],"names":["cwdPath","process","cwd","curPath","__dirname","version","command","action","name","isString","parse","argv"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAKA;AAbmC;AAcnC,IAAIA,UAAUC,QAAQC,GAAR,EAAd;AACA;AACA,IAAIC,UAAUC,SAAd;;AAEA,oBAAUC,OAAV,CAAkB,OAAlB,EACGC,OADH,CACW,qBADX,EAEGC,MAFH,CAEU,UAAUA,MAAV,EAAkBC,IAAlB,EAAwB;AAC9B,MAAI,CAAC,iBAAEC,QAAF,CAAWF,MAAX,CAAD,IAAuB,CAAC,iBAAEE,QAAF,CAAWD,IAAX,CAA5B,EAA8C;AAC5C,WAAO,wCAAP;AACD;;AAED,UAAQD,MAAR;AACE,SAAK,MAAL;AACE,8DAAcC,IAAd;;AAEA,8BAAWA,IAAX;AACA;AACF,SAAK,SAAL;AACE,8DAAcA,IAAd;;AAEA,+BAAcA,IAAd;AACA;AACF,SAAK,KAAL;AACE,8DAAcA,IAAd;;AAEA,4BAAUA,IAAV;AACA;AACF;AACE;AAjBJ;AAmBD,CA1BH;;AA4BA,oBAAUE,KAAV,CAAgBT,QAAQU,IAAxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"jt.js","sourcesContent":["import commander from 'commander'; // 解析命令\nimport {log, warn} from './log';\nimport {createPage} from './jt-page';\nimport {createCom} from './jt-com';\nimport createProject from './jt-project';\nimport _ from 'lodash';\nimport Git from 'nodegit';\nimport path from 'path';\nimport {\n  isFileExit,\n  camelName\n} from './util';\n\n// 执行命令的路径\nlet cwdPath = process.cwd();\n// 当前 jt-cli 的路径\nlet curPath = __dirname;\n\ncommander.version('1.0.0')\n  .command('new <action> <name>')\n  .action(function (action, name) {\n    if (!_.isString(action) || !_.isString(name)) {\n      return warn(`command must be string`)\n    };\n\n    switch (action) {\n      case 'page':\n        log(`正在创建页面 ${name} ...`);\n\n        createPage(name);\n        break;\n      case 'project': \n        log(`正在创建项目 ${name} ...`);\n\n        createProject(name);\n        break;\n      case 'com':\n        log(`正在创建组件 ${name} ...`);\n\n        createCom(name);\n        break;\n      default:\n        break;\n    }\n  });\n\ncommander.parse(process.argv);\n\n// 从 git 中获取数据\n// let gitFilePath = path.join(__dirname, '../test');\n// let repository;\n\n// if (isFileExit(path.join(__dirname, '../test/template'))) {\n//   // 更新\n//   Git.Repository.open(gitFilePath)\n//   .then((repo) => {\n//     repository = repo;\n\n//     return repository.fetchAll({\n//       callbacks: {\n//         credentials: function(url, userName) {\n//           return Git.Cred.sshKeyFromAgent(userName);\n//         },\n//         certificateCheck: function() {\n//           return 1;\n//         }\n//       }\n//     });\n//   })\n//   .then(() => {\n//     return repository.mergeBranches(\"master\", \"origin/master\");\n//   })\n//   .done(function() {\n//     console.log(\"Done!\");\n//   });\n// } else {\n//   // clone\n//   Git.Clone('https://github.com/wulunyi/jt-cli.git', gitFilePath).then(function(repository) {\n//     console.log('clone success');\n//   });\n// }\n"]}